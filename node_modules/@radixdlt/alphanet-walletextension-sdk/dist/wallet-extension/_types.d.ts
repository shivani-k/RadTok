export declare enum ActionType {
    GetAccountAddress = "getAccountAddress",
    GetAccountAddressSuccess = "getAccountAddressSuccess",
    GetAccountAddressFailure = "getAccountAddressFailure",
    SignTransaction = "signTransaction",
    SignTransactionSuccess = "signTransactionSuccess",
    SignTransactionFailure = "signTransactionFailure"
}
export declare type Action<T extends ActionType, P> = {
    type: T;
    payload: P;
    id: string;
};
export declare type GetAccountAddress = Action<ActionType.GetAccountAddress, string>;
export declare type GetAccountAddressSuccess = Action<ActionType.GetAccountAddressSuccess, string>;
export declare type GetAccountAddressFailure = Action<ActionType.GetAccountAddressFailure, string>;
export declare type SignTransaction = Action<ActionType.SignTransaction, {
    transactionManifest: string;
    blobs: string[];
}>;
export declare type SignTransactionSuccess = Action<ActionType.SignTransactionSuccess, {
    transactionHash: string;
}>;
export declare type SignTransactionFailure = Action<ActionType.SignTransactionFailure, string>;
export declare type ActionTypes = GetAccountAddress | GetAccountAddressSuccess | GetAccountAddressFailure | SignTransaction | SignTransactionSuccess | SignTransactionFailure;
export declare type IncomingMessage = Message<GetAccountAddressSuccess> | Message<GetAccountAddressFailure> | Message<SignTransactionSuccess> | Message<SignTransactionFailure>;
export declare type OutgoingMessage = Message<GetAccountAddress> | Message<SignTransaction>;
export declare enum MessageTarget {
    Extension = 0,
    Dapp = 1
}
export declare type Message<Action = ActionTypes> = {
    action: Action;
    target: MessageTarget;
};
