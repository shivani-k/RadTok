export declare type MessageClientType = ReturnType<typeof MessageClient>;
export declare const MessageClient: (subjects?: {
    outgoingMessageSubject: import("rxjs").Subject<import("./_types").OutgoingMessageType>;
    incomingMessageSubject: import("rxjs").Subject<import("./_types").IncomingMessageType>;
    responseSubject: import("rxjs").Subject<import("../errors").SdkError | {
        method: "request";
        requestId: string;
        payload: import("../methods").AccountAddressResponse[];
    } | {
        method: "sendTransaction";
        requestId: string;
        payload: {
            transactionHash: string;
        };
    }>;
    messageLifeCycleEventSubject: import("rxjs").Subject<{
        eventType: "receivedByExtension";
        requestId: string;
    }>;
    dispatchEventSubject: import("rxjs").Subject<import("./_types").MessageDispatch>;
}) => {
    destroy: () => void;
    subjects: {
        outgoingMessageSubject: import("rxjs").Subject<import("./_types").OutgoingMessageType>;
        incomingMessageSubject: import("rxjs").Subject<import("./_types").IncomingMessageType>;
        responseSubject: import("rxjs").Subject<import("../errors").SdkError | {
            method: "request";
            requestId: string;
            payload: import("../methods").AccountAddressResponse[];
        } | {
            method: "sendTransaction";
            requestId: string;
            payload: {
                transactionHash: string;
            };
        }>;
        messageLifeCycleEventSubject: import("rxjs").Subject<{
            eventType: "receivedByExtension";
            requestId: string;
        }>;
        dispatchEventSubject: import("rxjs").Subject<import("./_types").MessageDispatch>;
    };
};
