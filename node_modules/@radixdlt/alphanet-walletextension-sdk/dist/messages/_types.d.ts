import { MethodType, WalletRequests, WalletResponses } from '../methods/_types';
import { MessageLifeCycleEvent, OutgoingMessageEvent } from './events/_types';
declare type GenericOutgoingMessage<M extends MethodType> = {
    method: M;
    requestId: string;
    payload: WalletRequests[M];
};
export declare type OutgoingMessage = {
    request: GenericOutgoingMessage<'request'>;
    sendTransaction: GenericOutgoingMessage<'sendTransaction'>;
};
export declare type OutgoingMessageType = OutgoingMessage[MethodType];
declare type GenericIncomingMessage<M extends MethodType> = {
    method: M;
    requestId: string;
    payload: WalletResponses[M];
};
export declare type IncomingMessage = {
    request: GenericIncomingMessage<'request'>;
    sendTransaction: GenericIncomingMessage<'sendTransaction'>;
    messageLifeCycleEvent: {
        eventType: MessageLifeCycleEvent;
        requestId: string;
    };
};
export declare type IncomingMessageType = IncomingMessage[keyof IncomingMessage];
export declare type MessageDispatch = {
    event: OutgoingMessageEvent;
    payload: OutgoingMessageType;
};
export {};
